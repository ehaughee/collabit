{
  "author": {
    "name": "Scott GonzÃ¡lez",
    "email": "scott.gonzalez@gmail.com",
    "url": "http://scottgonzalez.com"
  },
  "name": "browserstack",
  "description": "A client for working with the BrowserStack API.",
  "version": "0.2.0",
  "homepage": "https://github.com/scottgonzalez/node-browserstack",
  "repository": {
    "type": "git",
    "url": "git://github.com/scottgonzalez/node-browserstack.git"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt": "0.3.x"
  },
  "main": "lib/browserstack.js",
  "readme": "# node-browserstack\n\nA node.js JavaScript client for working with [BrowserStack](http://browserstack.com) through its [API](https://github.com/browserstack/api).\n\n## Installation\n\n```\nnpm install browserstack\n```\n\n## Usage\n\n```javascript\nvar BrowserStack = require( \"browserstack\" );\nvar client = BrowserStack.createClient({\n\tusername: \"foo\",\n\tpassword: \"p455w0rd!!1\"\n});\n\nclient.getBrowsers(function( error, browsers ) {\n\tconsole.log( \"The following browsers are available for testing\" );\n\tconsole.log( browsers );\n});\n```\n\n## API\n\n### browser objects\n\nA common pattern in the API is a \"browser object\" which is just a plain object with the following properties:\n\n* `os`: The operating system.\n* `browser`: The browser name.\n* `device`: The device name.\n* `version`: The browser or device version.\n\nA browser object may only have one of `browser` or `device` set; which property is set will depend on `os`.\n\n*V1 does not support multiple operating systems.\nAs such, there is no `os` version, and browser objects will always use `browser`.*\n\n### worker objects\n\nWorker objects are extended [browser objects](#browser-objects) which contain the following additional properties:\n\n* `id`: The worker id.\n* `status`: A string representing the current status of the worker.\n  * Possible statuses: `\"running\"`, `\"queue\"`.\n\n### BrowserStack.createClient( settings )\n\nCreates a new client instance.\n\n* `settings`: A hash of settings that apply to all requests for the new client.\n  * `username`: The username for the BrowserStack account.\n  * `password`: The password for the BrowserStack account.\n  * `version` (optional; default: `2`): Which version of the BrowserStack API to use.\n  * `server` (optional; default: `{ host: \"api.browserstack.com\", port: 80 }`): An object containing `host` and `port` to connect to a different BrowserStack API compatible service.\n\n### client.getBrowsers( callback )\n\nGets the list of available browsers.\n\n* `callback` (`function( error, browsers )`): A callback to invoke when the API call is complete.\n  * `browsers`: An array of [browser objects](#browser-objects).\n\n### client.createWorker( settings, callback )\n\nCreates a worker.\n\n* `settings`: A hash of settings for the worker (an extended [browser object](#browser-objects)).\n  * `os`: Which OS to use for the new worker.\n  * `browser`/`device`: Which browser/device to use in the new worker. Which property to use depends on the OS.\n  * `version`: Which version of the specified browser to use.\n  * `url` (optional): Which URL to navigate to upon creation.\n  * `timeout` (optional): Maximum life of the worker (in seconds). Use 0 for \"forever\" (BrowserStack will kill the worker after 1,800 seconds).\n* `callback` (`function( error, worker )`): A callback to invoke when the API call is complete.\n  * `worker` A [worker object](#worker-objects).\n\n*Note: A special value of \"latest\" is supported for `version`, which will use the latest stable version.*\n\n### client.getWorker( id, callback )\n\nGets the status of a worker.\n\n* `id`: The id of the worker.\n* `callback` (`function( error, worker )`): A callback to invoke when the API call is complete.\n  * `worker`: A [worker object](#worker-objects).\n\n### client.terminateWorker( id, callback )\n\nTerminates an active worker.\n\n* `id`: The id of the worker to terminate.\n* `callback` (`function( error, data )`): A callback to invoke when the API call is complete.\n  * `data`: An object with a `time` property indicating how long the worker was alive.\n\n### client.getWorkers( callback )\n\nGets the status of all workers.\n\n* `callback` (`function( error, workers )`): A callback to invoke when the API call is complete.\n  * `workers`: An array of [worker objects](#worker-objects).\n\n### client.takeScreenshot( id, callback )\n\nTake a screenshot at current state of worker.\n\n* `callback` (`function( error, data )`): A callback to invoke when the API call is complete.\n  * `data`: An object with a `url` property having the public url for the screenshot.\n\n### client.getLatest( browser, callback )\n\nGets the latest version of a browser.\n\n* `browser`: Which browser to get the latest version for.\n* `callback` (`function( error, version )`): A callback to invoke when the version is determined.\n  * `version`: The latest version of the browser.\n\n### client.getLatest( callback )\n\nGets the latest version of all browsers.\n\n* `callback` (`function( error, versions )`): A callback to invoke when the versions are determined.\n  * `versions`: A hash of browser names and versions.\n\n## License\n\nnode-browserstack is licensed under the MIT license.\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/scottgonzalez/node-browserstack/issues"
  },
  "_id": "browserstack@0.2.0",
  "dist": {
    "shasum": "e26b1ac56509518b38e420648c2b713f85fa3379"
  },
  "_resolved": "git://github.com/browserstack/node-browserstack.git#c7ff8f6831768754254b2db90d011d31d208f67a",
  "_from": "browserstack@git://github.com/browserstack/node-browserstack.git"
}
